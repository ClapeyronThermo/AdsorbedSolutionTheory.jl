var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [AdsorbedSolutionTheory]","category":"page"},{"location":"reference/#AdsorbedSolutionTheory.Langmuir","page":"Reference","title":"AdsorbedSolutionTheory.Langmuir","text":"`Langmuir(M, K₀, E)`\n\nLangmuir <: IsothermModel\n\nLangmuir(M, K₀, E) represents the Langmuir isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\n\nDescription\n\nThe Langmuir equation is given by:\n\nn = (M * K₀ * p) / (1 + K₀ * p)\n\nwhere:\n\nn is the loading of the adsorbate on the adsorbent,\nM is the maximum loading capacity of the adsorbent,\nK₀ is the equilibrium constant at zero coverage,\np is the pressure of the gas.\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.RedlichPeterson","page":"Reference","title":"AdsorbedSolutionTheory.RedlichPeterson","text":"`RedlichPeterson(M, K₀, E, f)`\n\nRedlichPeterson <: IsothermModel\n\nRedlichPeterson(M, K₀, E, f) represents the Redlich-Peterson isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\nf::T: parameter characterising the heterogeneity of the system  (no units)\n\nDescription\n\nThe RedlichPeterson equation is given by:\n\nn = M * p / (1 + (K₀ * p)^f)\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.Sips","page":"Reference","title":"AdsorbedSolutionTheory.Sips","text":"`Sips(M, K₀, E, f)`\n\nSips <: IsothermModel\n\nSips(M, K₀, E, f) represents the Sips isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\nf::T: parameter characterising the heterogeneity of the system  (no units)\n\nDescription\n\nThe Sips equation is given by:\n\nn = M * (K₀ * p)^f / (1 + (K₀ * p)^f)\n\nwhere:\n\nn is the loading of the adsorbate on the adsorbent,\nM is the maximum loading capacity of the adsorbent,\nK₀ is the equilibrium constant at zero coverage,\np is the pressure of the gas.\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.Toth","page":"Reference","title":"AdsorbedSolutionTheory.Toth","text":"Toth <: IsothermModel\n\nToth(M, K₀, E, f₀, β)\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage,[1/Pa]`\nE::T: adsorption energy, [J/mol]\nf₀::T: Empirical parameter, -\nβ::T: Empirical parameter, K\n\nDescription\n\nToth isotherm model: \n\nK = K₀exp(-E/(RT)) f = f₀ + β/T nᵢ = MKP/(1 + (KP)ᶠ)¹/ᶠ\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.Unilan","page":"Reference","title":"AdsorbedSolutionTheory.Unilan","text":"`Unilan(M, K₀, E)`\n\nUnilan <: IsothermModel\n\nUnilan(M, K₀, E, f) represents the Unilan (UNIform distribution LANgmuir) isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\nf::T: heterogeneity of the adsorbent (no units)\n\nDescription\n\nThe UNILAN equation is given by:\n\nn = M * log((1 + K₀* exp(f) * p)/(1 + K₀ * exp(-f) * p)) / (2 * f)\n\nwhere:\n\nn is the loading of the adsorbate on the adsorbent,\nM is the maximum loading capacity of the adsorbent,\nK₀ is the equilibrium constant at zero coverage,\np is the pressure of the gas.\nf is the heterogeneity of the adsorbent. at the limit f -> 0, the langmuir isotherm is recovered.\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.f∂f-Union{Tuple{R}, Tuple{F}, Tuple{F, R}} where {F, R<:Real}","page":"Reference","title":"AdsorbedSolutionTheory.f∂f","text":"f∂f(f,x)\n\nreturns f and ∂f/∂x evaluated in x, using ForwardDiff.jl, DiffResults.jl and StaticArrays.jl to calculate everything in one pass.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.f∂f∂2f-Union{Tuple{R}, Tuple{F}, Tuple{F, R}} where {F, R<:Real}","page":"Reference","title":"AdsorbedSolutionTheory.f∂f∂2f","text":"f∂f∂2f(f,x)\n\nreturns f,∂f/∂x,and ∂²f/∂²x and evaluated in x, using ForwardDiff.jl, DiffResults.jl and StaticArrays.jl to calculate everything in one pass.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.henry_coefficient-Tuple{IsothermModel, Any}","page":"Reference","title":"AdsorbedSolutionTheory.henry_coefficient","text":"henry_coefficient(model::IsothermModel, T) -> H\n\nCalculate the Henry's coefficient for a single component system using the specified isotherm model and temperature T.\n\nArguments\n\nmodel::IsothermModel: An instance of IsothermModel, representing the isotherm model to be used for the calculation.\nT: The temperature at which the Henry's coefficient is to be calculated.\n\nReturns\n\nH: The Henry's coefficient in the default units of [mol/kg].\n\nDescription\n\nThis function returns the Henry's coefficient, which is a measure of the initial slope of the adsorption isotherm at low pressures. It is defined as the derivative of the loading q with respect to pressure p at p = 0:\n\nH = (∂q/∂p) at p = 0 at a given T.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.iast","page":"Reference","title":"AdsorbedSolutionTheory.iast","text":"iast(models,p,T,y,method = FastIAS(),gas_model = nothing;x0 = nothing,maxiters = 100,reltol = 1e-12, abstol = 1e-10)\n\nTODO: docs\n\nreturns qtot,x,convergencesymbol (:success, or :maxiters_exceeded)\n\n\n\n\n\n","category":"function"},{"location":"reference/#AdsorbedSolutionTheory.isosteric_heat-Tuple{IsothermModel, Any, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.isosteric_heat","text":"isosteric_heat(model::IsothermModel, Vᵍ, p, T; Vᵃ = zero(eltype(model))) -> Qₛₜ\n\nCalculate the isosteric heat of adsorption for a given isotherm model.\n\nArguments\n\nmodel::IsothermModel: The isotherm model used to describe the adsorption process.\nVᵍ: The molar volume of the gas phase.\nVᵃ: The molar volume of the adsorbed phase (typically Vᵃ << Vᵍ; default is zero).\np: Pressure at which the isosteric heat is evaluated.\nT: Temperature at which the isosteric heat is evaluated.\n\nReturns\n\nQₛₜ: The estimated isosteric heat of adsorption.\n\nDescription\n\nThe function estimates the isosteric heat of adsorption Qₛₜ for a single component using its isotherm and the Clausius-Clapeyron equation:\n\nQₛₜ = -T * (Vᵍ - Vᵃ) * (∂n/∂T)ₚ / (∂n/∂p)ₜ\n\nwhere:\n\nn is the loading,\nVᵍ is the molar volume of the gas phase,\nVᵃ is the molar volume of the adsorbed phase,\nT is the temperature,\np is the pressure.\n\nThis equation is derived based on the Clausius-Clapeyron relation, which relates the temperature dependence of the loading to the isosteric heat.\n\nReferences:\n\nPan, H., Ritter, J. A., & Balbuena, P. B. (1998). Examination of the approximations used in determining the isosteric heat of adsorption from the Clausius−Clapeyron equation. Langmuir: The ACS Journal of Surfaces and Colloids, 14(21), 6323–6327. doi:10.1021/la9803373\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.isotherm_lower_bound-Tuple{IsothermModel}","page":"Reference","title":"AdsorbedSolutionTheory.isotherm_lower_bound","text":"isotherm_lower_bound(model::IsothermModel)\nisotherm_lower_bound(T,model::IsothermModel)\nisotherm_lower_bound(T,::Type{M}) where M <:IsothermModel\n\nReturns the lower bound for the parameters of the isotherm model model of type M. with number type T, as a Ntuple{model_length(M),T}. The default assumes that all parameters are nonnegative.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.isotherm_upper_bound-Tuple{T} where T<:IsothermModel","page":"Reference","title":"AdsorbedSolutionTheory.isotherm_upper_bound","text":"isotherm_upper_bound(model::IsothermModel)\nisotherm_upper_bound(T,model::IsothermModel)\nisotherm_upper_bound(T,::Type{M}) where M <:IsothermModel\n\nReturns the upper bound for the parameters of the isotherm model model of type M. with number type T, as a Ntuple{model_length(M),T}. The default assumes no upper bound for the parameters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.loading-Tuple{IsothermModel, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.loading","text":"loading(model::IsothermModel, p, T) -> q\n\nCalculate the loading q based on the provided isotherm model, pressure p, and temperature T.\n\nArguments\n\nmodel::IsothermModel: An instance of IsothermModel, representing the isotherm model to be used for the calculation.\np: The pressure at which the loading is to be calculated.\nT: The temperature at which the loading is to be calculated.\n\nReturns\n\nq: The calculated loading based on the isotherm model, pressure, and temperature.\n\nDescription\n\nThis function computes the loading q based on the given isotherm model, pressure p, and temperature T.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.nlsolve","page":"Reference","title":"AdsorbedSolutionTheory.nlsolve","text":"function nlsolve(f!,x0,method=TrustRegion(Newton(), Dogleg()), options=NEqOptions(),chunk = ForwardDiff.Chunk{2}())\n\nGiven a function f!(result,x) that returns a system of equations, nlsolve(f!,x0) returns a NLSolvers.ConvergenceInfo struct that contains the results of the non-linear solving procedure.\n\nUses NLSolvers.jl as backend, the jacobian is calculated with ForwardDiff.jl, with the specified chunk size\n\nTo obtain the underlying solution vector, use x_sol\n\nTo see available solvers and options, check NLSolvers.jl\n\n\n\n\n\n","category":"function"},{"location":"reference/#AdsorbedSolutionTheory.pressure-Tuple{IsothermModel, Any, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.pressure","text":"pressure(model::IsothermModel, x, T, f; approx = :exact)\n\ngiven an isotherm::IsothermModel and x = f(model,p,T), find p such that f(model,p,T) = x. There are two options for f and x:\n\nwhen f is sp_res, then x = sp_res(model, p, T)\nwhen f is loading, then x = loading(model, p, T)\n\nBy default, it performs a root-finding over the isotherm. but custom implementations can be done by overloading pressure_impl(model::MyModel,x,T,f::typeof(f),approx) The approx::Symbol argument indicates if the procedure is exact or approximate. by default a henry coefficient aproximation is used when approx =:henry is used.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.saturated_loading-Tuple{IsothermModel, Any}","page":"Reference","title":"AdsorbedSolutionTheory.saturated_loading","text":"saturated_loading(model::IsothermModel, T)\n\nReturns the loading of of an adsorption isotherm when the pressure tends to infinity. by default it is evaluated at 1/√eps(eltype(model)) (6.7108864e7 for Float64 inputs.).\n\nInputs\n\nmodel::IsothermModel: the isotherm model\nT: temperature.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.sp_res-Tuple{Any, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.sp_res","text":"sp_res(model::IsothermModel, p, T) -> Π\n\nCalculate the reduced spreading pressure for a given isotherm model at a specific pressure p and temperature T.\n\nArguments\n\nmodel::IsothermModel: An instance of IsothermModel, representing the isotherm model used for the calculation.\np: The pressure at which the reduced spreading pressure is to be calculated.\nT: The temperature at which the reduced spreading pressure is to be calculated.\n\nReturns\n\nΠ: The reduced spreading pressure \n\nDescription\n\nThe reduced spreading pressure is a key quantity in Ideal Adsorbed Solution Theory (IAST), used to describe the adsorption behavior of mixtures. This function calculates the reduced spreading pressure Π by integrating the isotherm equation over the pressure range from 0 to p.\n\nThe reduced spreading pressure is often calculated numerically as:\n\nΠ = ∫ (q(p') / p') dp' from 0 to p\n\nwhere:\n\nq(p') is the loading at pressure p'.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.x_sol-Tuple{Any}","page":"Reference","title":"AdsorbedSolutionTheory.x_sol","text":"x_sol(res::NLSolvers.ConvergenceInfo)\n\nReturns the scalar or vector x that solves the system of equations or is the minimizer of an optimization procedure.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.@MultiSite-Tuple{Any}","page":"Reference","title":"AdsorbedSolutionTheory.@MultiSite","text":"@MultiSite(isotherms)\n\nUtility macro to build MultiSite types.\n\nExample:\n\njulia> v1 = @MultiSite{Langmuir,Langmuir} #abstract eltype\nMultiSite{T, Tuple{Langmuir{T}, Langmuir{T}}} where T\n\njulia> AdsorbedSolutionTheory.from_vec(v,[1,2,0,3,4,0])\nMultiSite{Int64, Tuple{Langmuir{Int64}, Langmuir{Int64}}}((Langmuir{Int64}(1, 2, 0), Langmuir{Int64}(3, 4, 0)))\n\njulia> v2 = @MultiSite{Langmuir,Langmuir}{Float64} #concrete eltype\nMultiSite{Float64, Tuple{Langmuir{Float64}, Langmuir{Float64}}}\n\njulia> AdsorbedSolutionTheory.from_vec(v2,[1,2,0,3,4,0])\nMultiSite{Float64, Tuple{Langmuir{Float64}, Langmuir{Float64}}}((Langmuir{Float64}(1.0, 2.0, 0.0), Langmuir{Float64}(3.0, 4.0, 0.0)))\n\n\n\n\n\n","category":"macro"},{"location":"reference/#AdsorbedSolutionTheory.@with_metadata-Tuple{Any}","page":"Reference","title":"AdsorbedSolutionTheory.@with_metadata","text":"@with_metadata(struct_expr)\n\nmacro that allows to define an isotherm model with additional metadata, about parameter bounds and descriptions of parameters:\n\nUsage:\n\nAdsorbedSolutionTheory.@with_metadata struct MyIsotherm{T} <: IsothermModel{T}\n    A::T,(0,1),\"field A\" #bounds and description provided\n    B::T #nothing provided\n    C::T,(1,10) #only bounds provided\n    D::T,nothing,\"field D\" #only description provided\nend\n\nfrom_vec(MyIsotherm,(1,2,3,4)) #ok\nfrom_vec(MyIsotherm,(-1,2,3,4)) #ArgumentError: MyIsotherm: value for the field `A` (field A) is out of the parameter bounds: (0.0 <= -1 <= 1.0) == false\nfrom_vec(MyIsotherm,(1,2,-3,4)) #ArgumentError: MyIsotherm: value for the field `C` is out of the parameter bounds: (1.0 <= -3 <= 10.0) == false\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AdsorbedSolutionTheory","category":"page"},{"location":"#Adsorbed-Solution-Theory","page":"Home","title":"Adsorbed Solution Theory","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Adsorbed Solution Theory","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Andrés Riedemann, University of Concepción\nVinicius Santana, Norwegian University of Science and Technology","category":"page"}]
}
