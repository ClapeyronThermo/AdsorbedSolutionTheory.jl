var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [AdsorbedSolutionTheory]","category":"page"},{"location":"reference/#AdsorbedSolutionTheory.DualSiteLangmuir","page":"Reference","title":"AdsorbedSolutionTheory.DualSiteLangmuir","text":"DualSiteLangmuir <: IsothermModel\n\nDualSiteLangmuir(M1, K₀1, E1, M2, K₀2, E2)\n\nDualSiteLangmuir(M1, K₀1, E1, M2, K₀2, E2) represents the DualSite Langmuir isotherm model.\n\nInputs\n\nM1::T: maximum loading capacity of the first adsorbent site, [mol/kg]\nK₀1::T: equilibrium constant at zero coverage for the first site, [1/Pa]\nE1::T: adsorption energy for the first site, [J/mol]\nM2::T: maximum loading capacity of the second adsorbent site, [mol/kg]\nK₀2::T: equilibrium constant at zero coverage for the second site, [1/Pa]\nE2::T: adsorption energy for the second site, [J/mol]\n\nDescription\n\nThe DualSite Langmuir equation is given by:\n\nn = M1 * log(1 + K1 * p) + M2 * log(1 + K2 * p)\n\nwhere:\n\nn is the loading of the adsorbate on the adsorbent,\nM1 and M2 are the maximum loading capacities of the first and second adsorbent sites, respectively,\nK1 and K2 are the equilibrium constants at zero coverage for the first and second sites, respectively,\np is the pressure of the gas.\n\nThe adsorption energies E1 and E2 are related to the equilibrium constants K₀1 and K₀2 by the equations:\n\nK1 = exp(-E1 / (R * T)) K2 = exp(-E2 / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature,\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.Langmuir","page":"Reference","title":"AdsorbedSolutionTheory.Langmuir","text":"`Langmuir(M, K₀, E)`\n\nLangmuir <: IsothermModel\n\nLangmuir(M, K₀, E) represents the Langmuir isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\n\nDescription\n\nThe Langmuir equation is given by:\n\nn = (M * K₀ * p) / (1 + K₀ * p)\n\nwhere:\n\nn is the loading of the adsorbate on the adsorbent,\nM is the maximum loading capacity of the adsorbent,\nK₀ is the equilibrium constant at zero coverage,\np is the pressure of the gas.\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.Toth","page":"Reference","title":"AdsorbedSolutionTheory.Toth","text":"Toth <: IsothermModel\n\nToth(M, K₀, E, f₀, β)\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage,[1/Pa]`\nE::T: adsorption energy, [J/mol]\nf₀::T: Empirical parameter, -\nβ::T: Empirical parameter, K\n\nDescription\n\nK = K₀exp(-E/(RT)) f = f₀ + β/T nᵢ = MKP/(1 + (KP)ᶠ)¹/ᶠ\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.Unilan","page":"Reference","title":"AdsorbedSolutionTheory.Unilan","text":"`Unilan(M, K₀, E)`\n\nUnilan <: IsothermModel\n\nUnilan(M, K₀, E, f) represents the Unilan (UNIform distribution LANgmuir) isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\nf::T: heterogeneity of the adsorbent (no units)\n\nDescription\n\nThe UNILAN equation is given by:\n\nn = M * log((1 + K₀* exp(f) * p)/(1 + K₀ * exp(-f) * p)) / (2 * f)\n\nwhere:\n\nn is the loading of the adsorbate on the adsorbent,\nM is the maximum loading capacity of the adsorbent,\nK₀ is the equilibrium constant at zero coverage,\np is the pressure of the gas.\nf is the heterogeneity of the adsorbent. at the limit f -> 0, the langmuir isotherm is recovered.\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.f∂f-Union{Tuple{R}, Tuple{F}, Tuple{F, R}} where {F, R<:Real}","page":"Reference","title":"AdsorbedSolutionTheory.f∂f","text":"f∂f(f,x)\n\nreturns f and ∂f/∂x evaluated in x, using ForwardDiff.jl, DiffResults.jl and StaticArrays.jl to calculate everything in one pass.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.f∂f∂2f-Union{Tuple{R}, Tuple{F}, Tuple{F, R}} where {F, R<:Real}","page":"Reference","title":"AdsorbedSolutionTheory.f∂f∂2f","text":"f∂f∂2f(f,x)\n\nreturns f,∂f/∂x,and ∂²f/∂²x and evaluated in x, using ForwardDiff.jl, DiffResults.jl and StaticArrays.jl to calculate everything in one pass.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.henry_coefficient-Tuple{AdsorbedSolutionTheory.IsothermModel, Any}","page":"Reference","title":"AdsorbedSolutionTheory.henry_coefficient","text":"henry_coefficient(model, T)\n\ndefault units: [mol/kg]\n\nReturns the single component spreading pressure of the model given the temperature T, defined as:\n\nH = 2\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.isosteric_heat-Tuple{AdsorbedSolutionTheory.IsothermModel, Any, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.isosteric_heat","text":"`isosteric_heat(model::IsothermModel, Vᵍ, Vᵃ = zero(eltype(model)), p, T)`\n\nCalculate the isosteric heat of adsorption for a given isotherm model.\n\nInputs\n\nmodel::IsothermModel: The isotherm model used to describe the adsorption process.\nVᵍ: The molar volume of the gas phase.\nVᵃ: The molar volume of the adsorbed phase (normaly Vᵃ << Vᵍ, default is zero).\np: Pressure at which the isosteric heat is evaluated.\nT: Temperature at which the isosteric heat is evaluated.\n\nReturns\n\nThe estimated isosteric heat of adsorption.\n\nDescription\n\nThe function Estimates the isosteric heat of adsorption for a single component from its isotherm  using the Clausius-Clapeyron Equation:\n\nQ_st = T × (Vᵍ - Vᵃ) × (∂n∂T)ₚ/(∂n∂P)ₜ (for explicit loading expressions)\n\nPan et al. (1998) https://doi.org/10.1021/la9803373\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.loading-Tuple{AdsorbedSolutionTheory.IsothermModel, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.loading","text":"loading(model::IsothermModel, p, T)\n\nCalculate the loading based on the model, pressure (p), and temperature (T).\n\nInputs\n\nmodel::IsothermModel: the isotherm model\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.nlsolve","page":"Reference","title":"AdsorbedSolutionTheory.nlsolve","text":"function nlsolve(f!,x0,method=TrustRegion(Newton(), Dogleg()), options=NEqOptions(),chunk = ForwardDiff.Chunk{2}())\n\nGiven a function f!(result,x) that returns a system of equations, nlsolve(f!,x0) returns a NLSolvers.ConvergenceInfo struct that contains the results of the non-linear solving procedure.\n\nUses NLSolvers.jl as backend, the jacobian is calculated with ForwardDiff.jl, with the specified chunk size\n\nTo obtain the underlying solution vector, use x_sol\n\nTo see available solvers and options, check NLSolvers.jl\n\n\n\n\n\n","category":"function"},{"location":"reference/#AdsorbedSolutionTheory.sp_res_pressure-Tuple{AdsorbedSolutionTheory.IsothermModel, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.sp_res_pressure","text":"sprespressure(model::IsothermModel,q)\n\ngiven an isotherm::IsothermModel and Π = spres(model,p), find p such that spres(model,p) = Π. by default, it performs a root-finding over the isotherm\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.x_sol-Tuple{Any}","page":"Reference","title":"AdsorbedSolutionTheory.x_sol","text":"x_sol(res::NLSolvers.ConvergenceInfo)\n\nReturns the scalar or vector x that solves the system of equations or is the minimizer of an optimization procedure.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AdsorbedSolutionTheory","category":"page"},{"location":"#Adsorbed-Solution-Theory","page":"Home","title":"Adsorbed Solution Theory","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Adsorbed Solution Theory","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Andrés Riedemann, University of Concepción\nVinicius Santana, Norwegian University of Science and Technology","category":"page"}]
}
