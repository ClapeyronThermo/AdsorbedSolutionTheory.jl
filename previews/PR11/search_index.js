var documenterSearchIndex = {"docs":
[{"location":"tutorials/background/#Models-in-adsorption-equilibrium","page":"Background","title":"Models in adsorption equilibrium","text":"","category":"section"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"Adsorption is a surface phenomenon where atoms, ions, or molecules from a gas, liquid, or dissolved solid adhere to the surface of another material. This process leads to the formation of a thin film of the adsorbed substance, known as the adsorbate, on the surface of the material it adheres to, called the adsorbent.","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"In thermodynamics, adsorption models play a similar role to equations of state in fluid systems, describing the equilibrium properties of adsorption processes. These models are crucial for understanding and predicting the thermodynamics of adsorption in both single and multiphase systems.","category":"page"},{"location":"tutorials/background/#Single-component-adsorption","page":"Background","title":"Single-component adsorption","text":"","category":"section"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"Over the last decade, three fundamental approaches have led to the development of a wide range of adsorption isotherm models, including well-known ones such as Langmuir, Freundlich, Dubinin-Radushkevich, Temkin, Toth, and many others.","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"The first approach focuses on kinetics, where adsorption and desorption rates are equal, establishing adsorption equilibrium as a dynamic process. The second approach is rooted in thermodynamics, offering a basis for deriving various forms of adsorption isotherm models. The third approach emphasizes the generation of characteristic curves to describe adsorption behavior.","category":"page"},{"location":"tutorials/background/#Isosteric-heat-of-adsorption","page":"Background","title":"Isosteric heat of adsorption","text":"","category":"section"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"The heat of adsorption is a critical design parameter in adsorptive gas separation units. During adsorption, heat is released as adsorbate molecules transition to a lower energy state on the surface of the adsorbent compared to their higher energy state in the bulk gas phase. This exothermic process significantly impacts both the efficiency and operational conditions of adsorption systems. For a single component, the isosteric heat is given by:","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"Q_st = -T*(V_g - V_a)*left( fracdP_idT right)rvert_(N_iA)","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"where Q_st is the isosteric heat of the component being adsorbed, T is the temperature, V_g is the molar volume of the component in gas phase, V_a is the molar volume of the component in adsorbed phase, N_i is the amount of component adsorbed of the component","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"When the isotherm is of the form N_i = f(T P_i), one can write:","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"Q_st i = -T*(V_g - V_a)*left( fracfracpartial N_ipartial Trvert_Pfracpartial N_ipartial Prvert_T right)","category":"page"},{"location":"tutorials/background/#Multi-component-adsorption","page":"Background","title":"Multi component adsorption","text":"","category":"section"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"The basic equations of the IAST are the analogue of Raoult's law in vapour–liquid equilibrium:","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"Py_i = P_i^0(pi)x_i","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"(1)","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"where","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"pi = pi_i = int_0^P_i^0 fracN_i^0(P)PdP","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"for i = 1N_c (2)","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"sum_i^N_c x_i = 1","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"(3)","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"Combining (1) and (3), the following nonlinear solve is set to:","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"f(pi) = 1 - sum_1^N_cfracPy_iP_i^0left(piright)","category":"page"},{"location":"tutorials/background/","page":"Background","title":"Background","text":"= 0 (4)","category":"page"},{"location":"tutorials/getting_started/#getting_started","page":"Getting Started","title":"Getting Started with AdsorbedSolutionTheory.jl","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"This is an introductory tutorial for AdsorbedSolutionTheory.jl (AST). We will demonstrate the basics of the package by building an isotherm model and estimating properties with it.","category":"page"},{"location":"tutorials/getting_started/#Installing-AdsorbedSolutionTheory.jl","page":"Getting Started","title":"Installing AdsorbedSolutionTheory.jl","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"To install AdsorbedSolutionTheory, use the Julia package manager.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg; Pkg.add(\"AdsorbedSolutionTheory\")","category":"page"},{"location":"tutorials/getting_started/#Initializing-an-IsothermModel-and-estimating-properties-for-single-component-adsorption","page":"Getting Started","title":"Initializing an IsothermModel and estimating properties for single component adsorption","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"In this package, we support several isotherm models. You can refer to the list of supported models here. Here is how you construct a Langmuir model.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdsorbedSolutionTheory #hide\nM = 1.913 # mol.kg⁻¹\nK₀ = 6.82e-10 # Pa⁻¹\nE  = -21_976.40 # J.mol⁻¹\nisotherm = Langmuir(M, K₀, E)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"You can use a instantiated model to estimate the equilibrium properties of the adsorption system. To estimate the loading (amount of adsorbate per mass of adsorbent) in the adsorbent, given the temperature T and pressure p, you can do as follows:","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"p = 101325.0\nT = 298.15\nl = loading(isotherm, p, T)","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"When estimating loading with a model, it is common to plot isotherms, i.e., pressure vs loading for a fixed temperature. To do it, you can use the loading_at_T(isotherm, P, T) function.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"using Plots #hide\nP = 0.0:5_000.0:100_000.0 |> collect\nl_at_300 = loading_at_T(isotherm, P, 300.)\nl_at_350 = loading_at_T(isotherm, P, 350.)\nplot(P, l_at_300, size = (500, 250), label = \"300K\")\nplot!(P, l_at_350, label = \"350K\")\nxlabel!(\"P (Pa)\")\nylabel!(\"l (mol/kg)\")","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"You can also estimate other properties from the isotherm such as the henry coefficient at a given temperature by calling henry_coefficient(model::IsothermModel, T). The henry coefficient should correspond to the slope of the isotherm when P rightarrow 00. In AdsorbedSolutionTheory.jl, this is obtained using automatic differentiation and introduces no numerical error in the estimate. You can see in the example below how to visualize the tangent line built from the henry coefficient at 300K.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"P_ = P[1:3]\nplot(P_, l_at_300[1:3], size = (500, 250), label = \"300K\") \nH = henry_coefficient(isotherm, 300.0)\nplot!(P_, H*P_, label = \"Tangent line\")","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"To finish this section for single component adsorption, one can also estimate the isosteric heat of adsorption by calling isosteric_heat(model, Vg, p, T) where Vg is the molar volume of the gas phase, p the pressure in Pascal and T the temperature in Kelvin. For the Langmuir model, the isosteric heat should be constant and equal to the energy parameter E. You can plot the isosteric heat either as a function of the pressure or loading.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"Below it is assumed that the ideal gas law is a good approximation to describe the molar volume of the gas phase.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"import AdsorbedSolutionTheory: Rgas\nVg = Rgas(isotherm)*300.0./P[2:end]\nΔH = map(Vg_P -> isosteric_heat(isotherm, first(Vg_P), last(Vg_P), 300.), zip(Vg, P[2:end])) |> x -> round.(x, digits = 7)\nscatter(l_at_300[2:end], ΔH, size = (500, 250),  ylabel = \"Isosteric heat (J/mol)\", xlabel = \"loading (mol/kg)\", label = \"Estimated isosteric heat with AD\")\nplot!([first(l_at_300), last(l_at_300)], [-E, -E], label = \"Expected value\") ","category":"page"},{"location":"tutorials/getting_started/#Estimating-properties-in-multicomponent-adsorption.","page":"Getting Started","title":"Estimating properties in multicomponent adsorption.","text":"","category":"section"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"When it comes to estimating properties in multicomponent adsorption, the Ideal Adsorption Solution Theory (IAST) has been proven accurate for a number of systems. It allows one to estimate multicomponent adsorption behavior from single component isotherms.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"When formulated, estimating the loading with IAST becomes a nonlinear solve problem which can be solved in different ways. Here, we support the Nested Loop and FastIAS methods. To know more about the two and which one to choose, refer to this paper: 10.1002/aic.14684.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"It can be shown analytically that IAST estimation of multicomponent loading is the same as the extendend Langmuir method when the parameter M_i (saturation loading) are the same for all components, i.e., n_i = fracM_i times K_i0 expfracDelta HRT1 + sum_i K_i times P_i. Below you can see a numerical example of it.","category":"page"},{"location":"tutorials/getting_started/","page":"Getting Started","title":"Getting Started","text":"using AdsorbedSolutionTheory\nimport AdsorbedSolutionTheory: Rgas\nisotherm_1 = Langmuir(1.913, 6.82e-10, -21_976.40)\nisotherm_2 = Langmuir(1.913, 1.801e-9, -16_925.01)\nmodels = (isotherm_1, isotherm_2)\n(n_total, x, is_success) = iast(models, 101325.0, 300., [0.5, 0.5], FastIAS())\nloading_1 =  n_total*x[1]\nloading_2 = n_total*x[2]\n\nK_1 = 6.82e-10*exp(21_976.40/Rgas(isotherm_1)/300.)\nK_2 = 1.801e-9*exp(16_925.01/Rgas(isotherm_2)/300.)\np_1 = 0.5*101325.0\np_2 = 0.5*101325.0\nloading_1_expected = 1.913*K_1*p_1/(1.0 + K_1*p_1 + K_2*p_2)\nloading_2_expected = 1.913*K_2*p_2/(1.0 + K_1*p_1 + K_2*p_2)\n\nprintln(\"IAST estimated loading for component 1 is: \", round(loading_1, digits = 4))\nprintln(\"Extende langmuir estimated loading for component 1 is: \", round(loading_1_expected, digits = 4))","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [AdsorbedSolutionTheory]","category":"page"},{"location":"reference/#AdsorbedSolutionTheory.Langmuir","page":"Reference","title":"AdsorbedSolutionTheory.Langmuir","text":"`Langmuir(M, K₀, E)`\n\nLangmuir <: IsothermModel\n\nLangmuir(M, K₀, E) represents the Langmuir isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\n\nDescription\n\nThe Langmuir equation is given by:\n\nn = (M * K₀ * p) / (1 + K₀ * p)\n\nwhere:\n\nn is the loading of the adsorbate on the adsorbent,\nM is the maximum loading capacity of the adsorbent,\nK₀ is the equilibrium constant at zero coverage,\np is the pressure of the gas.\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.RedlichPeterson","page":"Reference","title":"AdsorbedSolutionTheory.RedlichPeterson","text":"`RedlichPeterson(M, K₀, E, f)`\n\nRedlichPeterson <: IsothermModel\n\nRedlichPeterson(M, K₀, E, f) represents the Redlich-Peterson isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\nf::T: parameter characterising the heterogeneity of the system  (no units)\n\nDescription\n\nThe RedlichPeterson equation is given by:\n\nn = M * p / (1 + (K₀ * p)^f)\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.Sips","page":"Reference","title":"AdsorbedSolutionTheory.Sips","text":"`Sips(M, K₀, E, f)`\n\nSips <: IsothermModel\n\nSips(M, K₀, E, f) represents the Sips isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\nf::T: parameter characterising the heterogeneity of the system  (no units)\n\nDescription\n\nThe Sips equation is given by:\n\nn = M * (K₀ * p)^f / (1 + (K₀ * p)^f)\n\nwhere:\n\nn is the loading of the adsorbate on the adsorbent,\nM is the maximum loading capacity of the adsorbent,\nK₀ is the equilibrium constant at zero coverage,\np is the pressure of the gas.\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.Toth","page":"Reference","title":"AdsorbedSolutionTheory.Toth","text":"Toth <: IsothermModel\n\nToth(M, K₀, E, f₀, β)\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage,[1/Pa]`\nE::T: adsorption energy, [J/mol]\nf₀::T: Empirical parameter, -\nβ::T: Empirical parameter, K\n\nDescription\n\nToth isotherm model: \n\nK = K₀exp(-E/(RT)) f = f₀ + β/T nᵢ = MKP/(1 + (KP)ᶠ)¹/ᶠ\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.Unilan","page":"Reference","title":"AdsorbedSolutionTheory.Unilan","text":"`Unilan(M, K₀, E)`\n\nUnilan <: IsothermModel\n\nUnilan(M, K₀, E, f) represents the Unilan (UNIform distribution LANgmuir) isotherm model, which describes the adsorption of a gas on a solid surface.\n\nInputs\n\nM::T: maximum loading capacity of the adsorbent, [mol/kg]\nK₀::T: equilibrium constant at zero coverage, [1/Pa]\nE::T: adsorption energy, [J/mol]\nf::T: heterogeneity of the adsorbent (no units)\n\nDescription\n\nThe UNILAN equation is given by:\n\nn = M * log((1 + K₀* exp(f) * p)/(1 + K₀ * exp(-f) * p)) / (2 * f)\n\nwhere:\n\nn is the loading of the adsorbate on the adsorbent,\nM is the maximum loading capacity of the adsorbent,\nK₀ is the equilibrium constant at zero coverage,\np is the pressure of the gas.\nf is the heterogeneity of the adsorbent. at the limit f -> 0, the langmuir isotherm is recovered.\n\nThe adsorption energy E is related to the equilibrium constant K₀ by the equation:\n\nK₀ = exp(-E / (R * T))\n\nwhere:\n\nR is the gas constant,\nT is the temperature.\n\n\n\n\n\n","category":"type"},{"location":"reference/#AdsorbedSolutionTheory.f∂f-Union{Tuple{R}, Tuple{F}, Tuple{F, R}} where {F, R<:Real}","page":"Reference","title":"AdsorbedSolutionTheory.f∂f","text":"f∂f(f,x)\n\nreturns f and ∂f/∂x evaluated in x, using ForwardDiff.jl, DiffResults.jl and StaticArrays.jl to calculate everything in one pass.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.f∂f∂2f-Union{Tuple{R}, Tuple{F}, Tuple{F, R}} where {F, R<:Real}","page":"Reference","title":"AdsorbedSolutionTheory.f∂f∂2f","text":"f∂f∂2f(f,x)\n\nreturns f,∂f/∂x,and ∂²f/∂²x and evaluated in x, using ForwardDiff.jl, DiffResults.jl and StaticArrays.jl to calculate everything in one pass.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.henry_coefficient-Tuple{IsothermModel, Any}","page":"Reference","title":"AdsorbedSolutionTheory.henry_coefficient","text":"henry_coefficient(model::IsothermModel, T) -> H\n\nCalculate the Henry's coefficient for a single component system using the specified isotherm model and temperature T.\n\nArguments\n\nmodel::IsothermModel: An instance of IsothermModel, representing the isotherm model to be used for the calculation.\nT: The temperature at which the Henry's coefficient is to be calculated.\n\nReturns\n\nH: The Henry's coefficient in the default units of [mol/kg].\n\nDescription\n\nThis function returns the Henry's coefficient, which is a measure of the initial slope of the adsorption isotherm at low pressures. It is defined as the derivative of the loading q with respect to pressure p at p = 0:\n\nH = (∂q/∂p) at p = 0 at a given T.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.iast","page":"Reference","title":"AdsorbedSolutionTheory.iast","text":"iast(models,p,T,y,method = FastIAS(),gas_model = nothing;x0 = nothing,maxiters = 100,reltol = 1e-12, abstol = 1e-10)\n\nTODO: docs\n\nreturns qtot,x,convergencesymbol (:success, or :maxiters_exceeded)\n\n\n\n\n\n","category":"function"},{"location":"reference/#AdsorbedSolutionTheory.isosteric_heat-Tuple{IsothermModel, Any, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.isosteric_heat","text":"isosteric_heat(model::IsothermModel, Vᵍ, p, T; Vᵃ = zero(eltype(model))) -> Qₛₜ\n\nCalculate the isosteric heat of adsorption for a given isotherm model.\n\nArguments\n\nmodel::IsothermModel: The isotherm model used to describe the adsorption process.\nVᵍ: The molar volume of the gas phase.\nVᵃ: The molar volume of the adsorbed phase (typically Vᵃ << Vᵍ; default is zero).\np: Pressure at which the isosteric heat is evaluated.\nT: Temperature at which the isosteric heat is evaluated.\n\nReturns\n\nQₛₜ: The estimated isosteric heat of adsorption.\n\nDescription\n\nThe function estimates the isosteric heat of adsorption Qₛₜ for a single component using its isotherm and the Clausius-Clapeyron equation:\n\nQₛₜ = -T * (Vᵍ - Vᵃ) * (∂n/∂T)ₚ / (∂n/∂p)ₜ\n\nwhere:\n\nn is the loading,\nVᵍ is the molar volume of the gas phase,\nVᵃ is the molar volume of the adsorbed phase,\nT is the temperature,\np is the pressure.\n\nThis equation is derived based on the Clausius-Clapeyron relation, which relates the temperature dependence of the loading to the isosteric heat.\n\nReferences:\n\nPan, H., Ritter, J. A., & Balbuena, P. B. (1998). Examination of the approximations used in determining the isosteric heat of adsorption from the Clausius−Clapeyron equation. Langmuir: The ACS Journal of Surfaces and Colloids, 14(21), 6323–6327. doi:10.1021/la9803373\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.isotherm_lower_bound-Tuple{IsothermModel}","page":"Reference","title":"AdsorbedSolutionTheory.isotherm_lower_bound","text":"isotherm_lower_bound(model::IsothermModel)\nisotherm_lower_bound(T,model::IsothermModel)\nisotherm_lower_bound(T,::Type{M}) where M <:IsothermModel\n\nReturns the lower bound for the parameters of the isotherm model model of type M. with number type T, as a Ntuple{model_length(M),T}. The default assumes that all parameters are nonnegative.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.isotherm_upper_bound-Tuple{T} where T<:IsothermModel","page":"Reference","title":"AdsorbedSolutionTheory.isotherm_upper_bound","text":"isotherm_upper_bound(model::IsothermModel)\nisotherm_upper_bound(T,model::IsothermModel)\nisotherm_upper_bound(T,::Type{M}) where M <:IsothermModel\n\nReturns the upper bound for the parameters of the isotherm model model of type M. with number type T, as a Ntuple{model_length(M),T}. The default assumes no upper bound for the parameters.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.loading-Tuple{IsothermModel, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.loading","text":"loading(model::IsothermModel, p, T) -> q\n\nCalculate the loading q based on the provided isotherm model, pressure p, and temperature T.\n\nArguments\n\nmodel::IsothermModel: An instance of IsothermModel, representing the isotherm model to be used for the calculation.\np: The pressure at which the loading is to be calculated.\nT: The temperature at which the loading is to be calculated.\n\nReturns\n\nq: The calculated loading based on the isotherm model, pressure, and temperature.\n\nDescription\n\nThis function computes the loading q based on the given isotherm model, pressure p, and temperature T.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.nlsolve","page":"Reference","title":"AdsorbedSolutionTheory.nlsolve","text":"function nlsolve(f!,x0,method=TrustRegion(Newton(), Dogleg()), options=NEqOptions(),chunk = ForwardDiff.Chunk{2}())\n\nGiven a function f!(result,x) that returns a system of equations, nlsolve(f!,x0) returns a NLSolvers.ConvergenceInfo struct that contains the results of the non-linear solving procedure.\n\nUses NLSolvers.jl as backend, the jacobian is calculated with ForwardDiff.jl, with the specified chunk size\n\nTo obtain the underlying solution vector, use x_sol\n\nTo see available solvers and options, check NLSolvers.jl\n\n\n\n\n\n","category":"function"},{"location":"reference/#AdsorbedSolutionTheory.pressure-Tuple{IsothermModel, Any, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.pressure","text":"pressure(model::IsothermModel, x, T, f; approx = :exact)\n\ngiven an isotherm::IsothermModel and x = f(model,p,T), find p such that f(model,p,T) = x. There are two options for f and x:\n\nwhen f is sp_res, then x = sp_res(model, p, T)\nwhen f is loading, then x = loading(model, p, T)\n\nBy default, it performs a root-finding over the isotherm. but custom implementations can be done by overloading pressure_impl(model::MyModel,x,T,f::typeof(f),approx) The approx::Symbol argument indicates if the procedure is exact or approximate. by default a henry coefficient aproximation is used when approx =:henry is used.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.saturated_loading-Tuple{IsothermModel, Any}","page":"Reference","title":"AdsorbedSolutionTheory.saturated_loading","text":"saturated_loading(model::IsothermModel, T)\n\nReturns the loading of of an adsorption isotherm when the pressure tends to infinity. by default it is evaluated at 1/√eps(eltype(model)) (6.7108864e7 for Float64 inputs.).\n\nInputs\n\nmodel::IsothermModel: the isotherm model\nT: temperature.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.sp_res-Tuple{Any, Any, Any}","page":"Reference","title":"AdsorbedSolutionTheory.sp_res","text":"sp_res(model::IsothermModel, p, T) -> Π\n\nCalculate the reduced spreading pressure for a given isotherm model at a specific pressure p and temperature T.\n\nArguments\n\nmodel::IsothermModel: An instance of IsothermModel, representing the isotherm model used for the calculation.\np: The pressure at which the reduced spreading pressure is to be calculated.\nT: The temperature at which the reduced spreading pressure is to be calculated.\n\nReturns\n\nΠ: The reduced spreading pressure \n\nDescription\n\nThe reduced spreading pressure is a key quantity in Ideal Adsorbed Solution Theory (IAST), used to describe the adsorption behavior of mixtures. This function calculates the reduced spreading pressure Π by integrating the isotherm equation over the pressure range from 0 to p.\n\nThe reduced spreading pressure is often calculated numerically as:\n\nΠ = ∫ (q(p') / p') dp' from 0 to p\n\nwhere:\n\nq(p') is the loading at pressure p'.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.x_sol-Tuple{Any}","page":"Reference","title":"AdsorbedSolutionTheory.x_sol","text":"x_sol(res::NLSolvers.ConvergenceInfo)\n\nReturns the scalar or vector x that solves the system of equations or is the minimizer of an optimization procedure.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AdsorbedSolutionTheory.@MultiSite-Tuple{Any}","page":"Reference","title":"AdsorbedSolutionTheory.@MultiSite","text":"@MultiSite(isotherms)\n\nUtility macro to build MultiSite types.\n\nExample:\n\njulia> v1 = @MultiSite{Langmuir,Langmuir} #abstract eltype\nMultiSite{T, Tuple{Langmuir{T}, Langmuir{T}}} where T\n\njulia> AdsorbedSolutionTheory.from_vec(v,[1,2,0,3,4,0])\nMultiSite{Int64, Tuple{Langmuir{Int64}, Langmuir{Int64}}}((Langmuir{Int64}(1, 2, 0), Langmuir{Int64}(3, 4, 0)))\n\njulia> v2 = @MultiSite{Langmuir, Langmuir}{Float64} #concrete eltype\nMultiSite{Float64, Tuple{Langmuir{Float64}, Langmuir{Float64}}}\n\njulia> AdsorbedSolutionTheory.from_vec(v2,[1,2,0,3,4,0])\nMultiSite{Float64, Tuple{Langmuir{Float64}, Langmuir{Float64}}}((Langmuir{Float64}(1.0, 2.0, 0.0), Langmuir{Float64}(3.0, 4.0, 0.0)))\n\n\n\n\n\n","category":"macro"},{"location":"reference/#AdsorbedSolutionTheory.@with_metadata-Tuple{Any}","page":"Reference","title":"AdsorbedSolutionTheory.@with_metadata","text":"@with_metadata(struct_expr)\n\nmacro that allows to define an isotherm model with additional metadata, about parameter bounds and descriptions of parameters:\n\nUsage:\n\nAdsorbedSolutionTheory.@with_metadata struct MyIsotherm{T} <: IsothermModel{T}\n    A::T,(0,1),\"field A\" #bounds and description provided\n    B::T #nothing provided\n    C::T,(1,10) #only bounds provided\n    D::T,nothing,\"field D\" #only description provided\nend\n\nfrom_vec(MyIsotherm,(1,2,3,4)) #ok\nfrom_vec(MyIsotherm,(-1,2,3,4)) #ArgumentError: MyIsotherm: value for the field `A` (field A) is out of the parameter bounds: (0.0 <= -1 <= 1.0) == false\nfrom_vec(MyIsotherm,(1,2,-3,4)) #ArgumentError: MyIsotherm: value for the field `C` is out of the parameter bounds: (1.0 <= -3 <= 10.0) == false\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AdsorbedSolutionTheory","category":"page"},{"location":"#Adsorbed-Solution-Theory","page":"Home","title":"Adsorbed Solution Theory","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Adsorbed Solution Theory","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Andrés Riedemann, University of Concepción\nVinicius Santana, Norwegian University of Science and Technology","category":"page"}]
}
